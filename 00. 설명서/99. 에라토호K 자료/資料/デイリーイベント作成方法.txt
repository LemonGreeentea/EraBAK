eratohoK 데일리 이벤트를 만든다
==========================

ver1. 14.0 이행에서의 데일리 이벤트의 제작 방법을 설명한다  
표준적이 `ERB/SYSTEM/EVENT/DAILY/표준적`에 있으므로 이용을 추천.

 사전 준비

결정해 두어야 할 것

+ 데일리 이벤트의 종류
+ 데일리 이벤트의 이름
+ 데일리 이벤트의 식별자

 # 데일리 이벤트의 종류

데일리 이벤트에는, 통상의 데일리 이벤트와 통상의 데일리를 파생원으로서 발동하는 「파생 데일리 이벤트」가 존재한다  
파생 데일리 이벤트는, 예를 들면 「어느 데일리 이벤트로 특정의 선택을 하면, 다른 이벤트가 발생하도록(듯이)하고 싶다」라는 것 같은 때에 사용한다.

통상의 데일리 이벤트는 각각 고유의 발생 확률을 갖고, 콘피그에서의 발생 배율이나 발생 개수의 영향을 받는다  
파생 데일리 이벤트에는 발생 확률이 존재하지 않는다. 또,

+ 파생원이 된 데일리가 콘피그로 오프에되어 있지 않다
+ 발생 조건을 채운다

이상을 채우는 것으로, 콘피그에서의 발생 배율이나 발생 개수의 영향을 받는 일 없이 발동한다.

 # 데일리 이벤트의 이름

데일리 이벤트의 이름이다. 예를 들면 「약 행상인의 내방」이나 「아 바로 밤」등을 가리킨다.

 # 데일리 이벤트의 식별자

eratohoK 본체에 데일리 이벤트를 인식시키기 위한 캐릭터 라인을 가리킨다. 식별자를 후술 하는 함수군에게 포함하는 것으로, eratohoK가 데일리 이벤트를 인식할 수 있다. 통상의 데일리 이벤트, 파생 데일리 이벤트 각각으로, 식별자는 일의일 필요가 있다  
예를 들면 「약 행상인의 내방」의 식별자는 「SMUGGLER」이다.

 이벤트의 등록

종류, 이름, 식별자가 정해지면, `ERB\SYSTEM\EVENT_DAILY에 CREATE_DAILY_MAP.ERB`를 연다  `REGISTER_DAILY`라는 함수가 대량으로 불려 가고 있을 것으로, 다른 호출에 모방하고 호출을 추가한다 
 `CALL REGISTER_DAILY(데일리의 구분, 데일리의 식별자, "데일리의 이름")`와 같은 정도가 된다  
이것으로, eratohoK는 만든 데일리 이벤트를 인식할 수 있게 된다.

 실장해야 할 함수

데일리 이벤트가 올바르게 동작하기 위해서, 실장되고 있어야 할 함수군에 대해 설명한다  
함수명을 손으로 쓰고 있으면 미스의 바탕으로 되므로, 실장때는 전술의 표준적의 이용을 추천 한다  
XX의 부분에는 전술한 식별자를 입력한다    
(DERIVATION_)되고 있는 곳은, 그것이 파생 데일리인 경우에 입력한다(표준적을 이용하는 한 의식할 필요는 없겠지만).


 # EVENT_DAILY_XX_RATE

통상의 데일리 이벤트에 필수. 그 데일리 이벤트의 발동율을 천분율로 돌려준다  
20으로 쓰면 2%의 확률로 발동하는 데일리 이벤트가 되지만, 실제로는 콘피그의 발동 배율의 영향을 받는다.

 # EVENT_DAILY_DERIVATION_XX_DISABLE

파생 데일리 이벤트에 필수. 자신의 파생원이 되는 데일리 이벤트의, 콘피그에서의 온 오프 설정을 돌려준다  
콘피그로 오프로 되고 있는(배열 변수 DAILY_DISABLE의 해당하는 요소의 값이 1)인 경우에는, 파생 데일리 이벤트도 발생하지 않는다  
`RETURN DAILY_DISABLE:(FINDELEMENT(DAILY_EVENT_NAME_ENG, "XX"))`같이 반환한다. XX에는**파생원데일리 이벤트의**식별자가 들어간다.

 # EVENT_DAILY_(DERIVATION_) XX_DECISION

통상·파생 데일리 이벤트 모두 필수  
발생 확률 이외의 판정, 예를 들면 「특정의 플래그가 서 있을까」라고 한 체크를 실시한다  
체크를 클리어 했을 경우는 1, 클리어 하지 않았던 경우는 0을 돌려준다  0을 돌려주었을 경우, 데일리 이벤트는 발동하지 않는다.
통상의 데일리 이벤트에서는 확률 판정과 이 함수를 모두 클리어 한 이벤트가 「기본적으로는」발생한다  
파생 데일리 이벤트에는 확률 판정이 없기에, 이 함수의 클리어만으로 「기본적으로는」발생한다.

 # EVENT_DAILY_(DERIVATION_) XX_SETTARGET

통상·파생 데일리 이벤트 모두 필수는 아니다  
그 데일리 이벤트가 특정의 캐릭터만을 대상으로 하고 싶은, 한편 대상이 되는 캐릭터가 없으면 발동하고 싶지 않다는 경우에 실장한다  
이 때 선출한 대상은 배열 변수 DAILY_TARGET에 격납해 둬, 데일리 이벤트 본체 함수로 꺼낸다.
선출한 대상이 존재하는 경우는 1, 존재하지 않는 경우는 0을 돌려준다. 0을 돌려주었을 경우, 데일리 이벤트는 발동하지 않는다.
예를 들어 통상 데일리 「암캐의 생활」은, 소질 「암캐」소지자만을 대상으로 하고 있다. 이 경우의 코드는 이하같이 된다.

```
FOR LOCAL, 0, CHARANUM
	;여자가 아닌지, 죽어 있는, 포로의 캐릭터는 안 돼
	SIF ! IS_FEMALE(LOCAL)
		CONTINUE
	SIF CFLAG:LOCAL:특수 상태 ==특수 상태_사망
		CONTINUE
	SIF CFLAG:LOCAL:포로처
		CONTINUE
	;암캐를 갖고 있지 않으면 안 돼
	IF GETBIT(TALENT:LOCAL:소질_음란계, 소질_음란_암캐)
		DAILY_TARGET:DAILY_TARGET_NUM = LOCAL
		DAILY_TARGET_NUM ++
	ENDIF
NEXT

SIF DAILY_TARGETNUM == 0
	RETURN 0

RETURN 1
```

 # EVENT_DAILY_(DERIVATION_) XX_NAME

통상·파생 데일리 이벤트 모두 필수는 아니다  
데일리 이벤트가 발동시, 이벤트명이 표시된다  
이 이벤트명은 기본적으로 등록시（후술）의 것이지만, NAME 함수가 돌려준 값은 그것을 덧쓰기한다  
이벤트의 진행에 응해 이벤트명을 고쳐 쓰고 싶다고 할 때 이용한다.

 #  EVENT_DAILY_XX_GENRE

통상의 데일리 이벤트에 필수. 데일리 이벤트의 장르를 기술한다  
어떠한 장르가 있을까는, VARIABLE_DAILY.ERH에 기술이 있다  
사실 실장하지 않아도 데일리 이벤트 자체는 발동하지만, 콘피그에서 온 오프의 설정을 할 수 없게 되어, 지장을 초래한다.

 # EVENT_DAILY_XX_ALLOW_WHEN_WANDERING

통상·파생 데일리 이벤트 모두 필수는 아니다.
주인공이 방랑하고 있는 경우에서의 발생을 허가한다.

 # EVENT_DAILY_(DERIVATION_) XX

데일리 이벤트의 본체이다. 여기에 이벤트의 본체를 기술한다.

 DVAR/DSTR

데일리 이벤트에 관련하는 값을 격납하기 위한 배열 변수  세이브된다.
DAILY_CONST.ERH를 열어 정수를 선언해, 그것을 배열 요소에의 액세스의 인덱스로서 이용한다  
예를 들어 「샘플」이벤트로 「이벤트가 종료해, 두 번 다시 발생하지 않는 것을 나타내는 플래그」를 준비한다면, 이하같이한다.

1. DAILY_CONST.ERH에,`# DIM CONST 샘플_이벤트 종료 플래그 = 400`와 기술한다(번호는 적당 읽어 바꾼다. 어느 정도 여유를 가져, 우츠호 있는 것을 지정한다).
2. 이벤트 본체나 DECISION 함수 따위로, `DVAR:샘플_이벤트 종료 플래그`에의 대입이나 참조를 실시한다.

 # 비고:DVAR에 캐릭터에게로의 참조를 보존

eratohoK에서는 캐릭터의 삭제나 교체를 실시하는 일이 있기 때문에, 단순하게 캐릭터 번호를 격납해 이것을 하려고 했을 경우, 격납시로 꺼내 때에 다른 캐릭터를 참조해 버릴 가능성이 있다  
이러한 일을 막기 위해, eratohoK에서는 캐릭터의 생성시, ID라는 불변의 일의인 값을 할당하고 있다. DVAR와 같은 세이브되는 변수로 캐릭터 참조를 격납하고 싶은에는 이쪽을 이용한다  
`DVAR:샘플_대상 = GET_ID(대상)`같이 격납해,`대상 = ID_TO_CHARA(DVAR:샘플_대상)`같이 꺼낸다.

 구상 데일리에 대해

구상 데일리도 대체로 작성 방법은 같지만, 이하의 점에 대해 다르다.

 # 각 함수명

`EVENT_`로 되어 있던 곳이`KOJO_`가 된다. 또 캐릭터 NO를 지정하는`KXX`라는 구가 각 함수에 포함되게 되어, XX를 캐릭터 NO로 치환할 필요가 있다.

 # 이벤트의 등록처

전이벤트로 공통의 CREATE_DAILY_MAP가 아니고, 각 캐릭터 고유의 CREATE_DAILY_MAP를 호출하는 일이 된다  
`CREATE_KOJO_DAILY_MAP_K{캐릭터 NO}(대상)`라는 함수내에서 호출해, `CALL REGISTER_KOJO_DAILY(대상, 데일리의 구분, 데일리의 식별자, "데일리의 이름")`라는 상태에 기술해 등록한다.
`

 # 필수적인 함수

구상 데일리를 발동시키기 위해서(때문에), 최저한의 구상 본체도 필요하게 된다.
구상 텐프레이트안의`KOJO_COMMON_KX.ERB` 안, `KOJO_EXIST_KXXX`함수가 필요하게 된다.
