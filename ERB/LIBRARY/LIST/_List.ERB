;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#
;
;Module   :_LIST.ERB, _LIST.ERH
;Facility :문자열을 가변장 배열과 같이 취급하는 라이브라리
;Licence  :라이센스 프리(CC0).
;
;Modification Data:
;  Edit  Date          Author                   Reason
;  001   2018/08/29    MinorShift(Emuera의 사람)   신규 작성
;_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/#


;문자열을 사용한 가변장 배열도 물러나
;"치, 치, 치, "라는 형식에서 데이터를 보존한다（요소수가 1이상이라면 종단에 칸마가 필수）
;예를 들면, 가변장 배열용 문자열 STR가"쇼트, 세미롱, 롱, "일 때, LIST_GET(STR, 1)는 "세미롱"을 돌려준다.
;또, STR가"쇼트, 세미롱, 롱, "일 때, LIST_ADD(STR, "롱 웨이브")는"쇼트, 세미롱, 롱, 롱 웨이브, "를 돌려준다.
;제한으로서 격납하는 값에는 칸마가 포함되어 있어서는 안 된다. 당연 상자에는 할 수 없다.
;표준에서는 하나의 가변장 배열중의 요소의 최대수는 100개. _LIST.ERH를 변경하면 늘릴 수 있지만 실행 속도가 실용적이지 않다고 생각된다.
;조금이라도 고속화하기 위해서 데이터 형식의 체크는 생략하고 있다. 그 때문에 부정한 형식의 데이터가 보내져 오면 무엇이 일어나는지 모른다.
;데이터를 정리해 격납하기 위해서 아무쪼록.
;_Dictionary와는 독립하고 있으므로 값으로 해서 연상 배열을 격납한다, 또는 가변장 배열을 연상 배열에 격납할 수 있다. 상자로 하면 죽는다.

;@LIST_ADD(_LIST, _VALUE) ;대상의 가변장 배열의 말미에_VALUE를 추가한 가변장 배열을 돌려준다.
;@LIST_SET(_LIST, _INDEX, _VALUE) ;대상의 가변장 배열의_INDEX 번째의 요소를_VALUE로 덧쓰기한 가변장 배열을 돌려준다. 배열 사이즈가 부족하면 자동적으로 확장된다.
;@LIST_ADDLIST(_LIST, _LIST_OTHER) ;대상의 가변장 배열의 말미에_LIST_OTHER를 결합한 가변장 배열을 돌려준다.
;@LIST_GET(_LIST, _INDEX) ;대상의 가변장 배열의_INDEX 번째의 요소를 돌려준다. 배열의 범위외인 경우, 빈 문자열을 돌려준다.
;@LIST_INDEXOF(_LIST, _VALUE) ;대상의 가변장 배열에_VALUE와 완전 일치하는 요소가 존재하면 그 최초의 INDEX, 존재하지 않으면 -1을 돌려준다.
;@LIST_COUNT(_LIST) ;대상의 가변장 배열의 사이즈（요소수）를 돌려준다.
;@LIST_INSERTAT(_LIST, _INDEX, _VALUE) ;대상의 가변장 배열의_INDEX 번째에_VALUE를 추가한 가변장 배열을 돌려준다.
;@LIST_REMOVEAT(_LIST, _INDEX) ;대상의 가변장 배열의_INDEX 번째의 요소를 삭제한 가변장 배열을 돌려준다. 배열의 범위외인 경우, _LIST를 그대로 돌려준다.
;@LIST_REMOVEALL(_LIST, _VALUE) ;대상의 가변장 배열로부터_VALUE와 일치하는 요소를 모두 삭제한 가변장 배열을 돌려준다.
;@LIST_SORT(_LIST) ;대상의 가변장 배열을 오름차순으로 소트 한 가변장 배열을 돌려준다.
;@LIST_SORT_R(_LIST) ;대상의 가변장 배열을 역순서（내림차순）로 소트 한 가변장 배열을 돌려준다.
;@LIST_FOREACH(_LIST, _FUNCNAME) ;대상의 가변장 배열에 포함되는 요소 모두에 대해, 차례로 CALLFORM %_FUNCNAME%, _VALUE; 를 실행한다.


;================================================
;@LIST_SET (#FUNCTIONS);대상의 가변장 배열의_INDEX 번째의 요소를_VALUE로 덧쓰기한 가변장 배열을 돌려준다. 배열 사이즈가 부족하면 자동적으로 확장된다.
;_LIST       대상의 가변장 배열（문자열）
;_INDEX      추가 또는 변경하는 장소의 인덱스
;_VALUE      추가 또는 변경하는 값
;RETURNF     추가 또는 변경된 가변장 배열（문자열）
;================================================
@LIST_SET(_LIST, _INDEX, _VALUE)
#FUNCTIONS
#DIMS _LIST
#DIM _INDEX
#DIMS _VALUE
#DIM _COUNT
IF _INDEX < 0
	THROW _List.ERB:_INDEX에 부의 값({_INDEX})가 지정되었다→%_LIST%
ENDIF
_LIST_LENGTH = STRCOUNT(_LIST, ",")
;배열수 부족하면 확장（, 를 늘린다）해 종료
IF _INDEX >= _LIST_LENGTH
	RETURNF _LIST + ("," * (_INDEX - _LIST_LENGTH)) + _VALUE + ","
ENDIF
;(_INDEX-1) 번째의 칸마와 _INDEX 번째의 칸마를 탐색해_LIST_INDEX_LEFT, _LIST_INDEX_RIGHT에 대입
_LIST_INDEX_COMMA = -1
_LIST_INDEX_LEFT = -1
_COUNT = 0
WHILE 1
	_LIST_INDEX_COMMA = STRFINDU(_LIST, "," , _LIST_INDEX_COMMA + 1)
	IF _COUNT == _INDEX
		_LIST_INDEX_RIGHT = _LIST_INDEX_COMMA
		BREAK
	ENDIF
	_LIST_INDEX_LEFT = _LIST_INDEX_COMMA
	_COUNT ++
WEND
IF _INDEX > 0
	;우단에 칸마를 포함한 형태로 잘라낸다
	_LIST_LEFT '= SUBSTRINGU(_LIST,0,_LIST_INDEX_LEFT+1)
ELSE
	_LIST_LEFT '= ""
ENDIF
;좌단에 칸마를 포함한 형태로 잘라낸다
_LIST_RIGHT '= SUBSTRINGU(_LIST, _LIST_INDEX_RIGHT , -1)

;더해 돌려준다
RETURNF _LIST_LEFT + _VALUE + _LIST_RIGHT


;================================================
;@LIST_ADD (#FUNCTIONS);대상의 가변장 배열의 말미에_VALUE를 추가한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_VALUE      추가하는 값
;RETURNF     추가된 가변장 배열（문자열）
;================================================
@LIST_ADD(_LIST, _VALUE)
#FUNCTIONS
#DIMS _LIST
#DIMS _VALUE
RETURNF _LIST + _VALUE + ","

;================================================
;@LIST_ADDLIST (#FUNCTIONS);대상의 가변장 배열의 말미에_LIST_OTHER를 결합한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_LIST_OTHER 추가하는 가변장 배열
;RETURNF     추가된 가변장 배열（문자열）
;================================================
@LIST_ADDLIST(_LIST, _LIST_OTHER)
#FUNCTIONS
#DIMS _LIST
#DIMS _LIST_OTHER
RETURNF _LIST + "," + _LIST_OTHER

;@LIST_GET(_LIST, _INDEX) ;대상의 가변장 배열의_INDEX 번째의 요소를 돌려준다. 배열의 범위외인 경우, 빈 문자열을 돌려준다.
;================================================
;@LIST_GET (#FUNCTIONS);대상의 가변장 배열의_INDEX 번째의 요소를 돌려준다. 배열의 범위외인 경우, 빈 문자열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_INDEX      취득하는 요소의 인덱스
;RETURNF     취득한 요소
;================================================
@LIST_GET(_LIST, _INDEX)
#FUNCTIONS
#DIMS _LIST
#DIM _INDEX
#DIM _COUNT
IF _INDEX < 0
	THROW _List.ERB:_INDEX에 부의 값({_INDEX})가 지정되었다→%_LIST%
ENDIF
;(_INDEX-1) 번째의 칸마와 _INDEX 번째의 칸마를 탐색해_LIST_INDEX_LEFT, _LIST_INDEX_RIGHT에 대입
_LIST_INDEX_COMMA = -1
_LIST_INDEX_LEFT = -1
_COUNT = 0
WHILE 1
	_LIST_INDEX_COMMA = STRFINDU(_LIST, "," , _LIST_INDEX_COMMA + 1)
	IF _COUNT == _INDEX
		_LIST_INDEX_RIGHT = _LIST_INDEX_COMMA
		BREAK
	ENDIF
	;_INDEX가 배열외 참조
	IF _LIST_INDEX_COMMA < 0
		RETURNF ""
	ENDIF
	_LIST_INDEX_LEFT = _LIST_INDEX_COMMA
	_COUNT ++
WEND
RETURNF SUBSTRINGU(_LIST,_LIST_INDEX_LEFT + 1, _LIST_INDEX_RIGHT - _LIST_INDEX_LEFT - 1)



;@LIST_COUNT(_LIST) ;대상의 가변장 배열의 사이즈（요소수）를 돌려준다.
;================================================
;@LIST_COUNT (#FUNCTION);대상의 가변장 배열의 사이즈（요소수）를 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;RETURNF     사이즈（요소수）
;================================================
@LIST_COUNT(_LIST)
#FUNCTION
#DIMS _LIST
RETURNF STRCOUNT(_LIST, ",")



;================================================
;@LIST_INSERTAT (#FUNCTIONS);대상의 가변장 배열의_INDEX 번째에_VALUE를 추가한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_INDEX      추가하는 장소의 인덱스
;_VALUE      추가하는 값
;RETURNF     추가된 가변장 배열（문자열）
;================================================
@LIST_INSERTAT(_LIST, _INDEX, _VALUE)
#FUNCTIONS
#DIMS _LIST
#DIM _INDEX
#DIMS _VALUE
#DIM _COUNT
IF _INDEX < 0
	THROW _List.ERB:_INDEX에 부의 값({_INDEX})가 지정되었다→%_LIST%
ENDIF
_LIST_LENGTH = STRCOUNT(_LIST, ",")
;배열수 부족하면 확장（, 를 늘린다）해 종료. LIST_SET와 같은 처리
IF _INDEX >= _LIST_LENGTH
	RETURNF _LIST + ("," * (_INDEX - _LIST_LENGTH)) + _VALUE + ","
ENDIF

;(_INDEX-1) 번째의 칸마와 _INDEX 번째의 칸마를 탐색해_LIST_INDEX_LEFT, _LIST_INDEX_RIGHT에 대입
_LIST_INDEX_COMMA = -1
_LIST_INDEX_LEFT = -1
_COUNT = 0
WHILE 1
	_LIST_INDEX_COMMA = STRFINDU(_LIST, "," , _LIST_INDEX_COMMA + 1)
	IF _COUNT == _INDEX
		_LIST_INDEX_RIGHT = _LIST_INDEX_COMMA
		BREAK
	ENDIF
	_LIST_INDEX_LEFT = _LIST_INDEX_COMMA
	_COUNT ++
WEND
IF _INDEX > 0
	;우단에 칸마를 포함한 형태로 잘라낸다
	_LIST_LEFT '= SUBSTRINGU(_LIST,0,_LIST_INDEX_LEFT+1)
ELSE
	_LIST_LEFT '= ""
ENDIF
;좌단에 칸마를 포함한 형태로 잘라낸다
_LIST_RIGHT '= SUBSTRINGU(_LIST, _LIST_INDEX_LEFT , -1); _LIST_INDEX_RIGHT가 아니고 LEFT. 원래의 INDEX 번째의 요소를 포함한다

;더해 돌려준다
RETURNF _LIST_LEFT + _VALUE + _LIST_RIGHT



;================================================
;@LIST_REMOVEAT (#FUNCTIONS);대상의 가변장 배열의_INDEX 번째의 요소를 삭제한 가변장 배열을 돌려준다. 배열의 범위외인 경우, _LIST를 그대로 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_INDEX      삭제하는 장소의 인덱스
;RETURNF     삭제된 가변장 배열（문자열）
;================================================
@LIST_REMOVEAT(_LIST, _INDEX)
#FUNCTIONS
#DIMS _LIST
#DIM _INDEX
#DIM _COUNT
IF _INDEX < 0
	THROW _List.ERB:_INDEX에 부의 값({_INDEX})가 지정되었다→%_LIST%
ENDIF
_LIST_LENGTH = STRCOUNT(_LIST, ",")
;배열외라면_LIST를 그대로 돌려준다
IF _INDEX > _LIST_LENGTH
	RETURNF _LIST
ENDIF
;배열의 유일한 요소를 삭제하려고 하고 있다면 빈배열（빈 문자열）를 돌려준다
IF _LIST_LENGTH == 1 && _INDEX == 0
	RETURNF ""
ENDIF
;(_INDEX-1) 번째의 칸마와 _INDEX 번째의 칸마를 탐색해_LIST_INDEX_LEFT, _LIST_INDEX_RIGHT에 대입
_LIST_INDEX_COMMA = -1
_LIST_INDEX_LEFT = -1
_COUNT = 0
WHILE 1
	_LIST_INDEX_COMMA = STRFINDU(_LIST, "," , _LIST_INDEX_COMMA + 1)
	IF _COUNT == _INDEX
		_LIST_INDEX_RIGHT = _LIST_INDEX_COMMA
		BREAK
	ENDIF
	_LIST_INDEX_LEFT = _LIST_INDEX_COMMA
	_COUNT ++
WEND
IF _INDEX > 0
	;우단에 칸마를 "포함하지 않는다"형태로 잘라낸다
	_LIST_LEFT '= SUBSTRINGU(_LIST,0,_LIST_INDEX_LEFT)
ELSE
	_LIST_LEFT '= ""
ENDIF
;좌단에 칸마를 포함한 형태로 잘라낸다
_LIST_RIGHT '= SUBSTRINGU(_LIST, _LIST_INDEX_RIGHT , -1)

;더해 돌려준다
RETURNF _LIST_LEFT + _LIST_RIGHT


;================================================
;@LIST_INDEXOF (#FUNCTION) ;대상의 가변장 배열에_VALUE와 완전 일치하는 요소가 존재하면 그 최초의 INDEX, 존재하지 않으면 -1을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_VALUE      탐색하는 값
;RETURNF     발견된 INDEX 또는-1
;================================================
@LIST_INDEXOF(_LIST, _VALUE)
#FUNCTION
#DIMS _LIST
#DIMS _VALUE
#DIM _KEYCOUNT
#DIM _CNT
;부실 해 「_VALUE + ", "」를 FIND 하면_VALUE가 빈 문자열때에 폭사한다
SPLIT _LIST, ",", _LIST_ELEMENT
IF RESULT > _LIST_MAX
	THROW _List.ERB:리스트의 요소수가 너무 많다→%_LIST%
ENDIF
_KEYCOUNT = RESULT-1 ;말미가, 이므로 SPLIT 한 말단은 빈 문자열이 된다
IF _KEYCOUNT <= 0
	RETURNF -1
ENDIF
FOR _CNT,0,_KEYCOUNT
	IF _LIST_ELEMENT:_CNT == _VALUE
		RETURNF _CNT
	ENDIF
NEXT
RETURNF -1

;================================================
;@LIST_REMOVEALL (#FUNCTIONS) ;대상의 가변장 배열로부터_VALUE와 일치하는 요소를 모두 삭제한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;_VALUE      삭제하는 값
;RETURNF     삭제된 가변장 배열（문자열）
;================================================
@LIST_REMOVEALL(_LIST, _VALUE)
#FUNCTIONS
#DIMS _LIST
#DIMS _VALUE
#DIM _KEYCOUNT
#DIM _CNT
;부실 해 「_VALUE + ", "」를 빈 문자열으로 REPLACE 하면_VALUE가 빈 문자열때에 폭사한다
SPLIT _LIST, ",", _LIST_ELEMENT
IF RESULT > _LIST_MAX
	THROW _List.ERB:리스트의 요소수가 너무 많다→%_LIST%
ENDIF
_KEYCOUNT = RESULT-1 ;말미가, 이므로 SPLIT 한 말단은 빈 문자열이 된다
IF _KEYCOUNT <= 0
	RETURNF _LIST
ENDIF
_LIST '= ""
FOR _CNT,0,_KEYCOUNT
	IF _LIST_ELEMENT:_CNT == _VALUE
		CONTINUE
	ENDIF
	_LIST += _LIST_ELEMENT:_CNT + ","
NEXT
RETURNF _LIST

;================================================
;@LIST_SORT (#FUNCTIONS) ;대상의 가변장 배열을 오름차순으로 소트 한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;RETURNF     소트 된 가변장 배열（문자열）
;================================================
@LIST_SORT(_LIST)
#FUNCTIONS
#DIMS _LIST
#DIMS _FUNCNAME
#DIM _KEYCOUNT
#DIM _CNT
SPLIT _LIST, ",", _LIST_ELEMENT
IF RESULT > _LIST_MAX
	THROW _List.ERB:리스트의 요소수가 너무 많다→%_LIST%
ENDIF
_KEYCOUNT = RESULT-1 ;말미가, 이므로 SPLIT 한 말단은 빈 문자열이 된다
IF _KEYCOUNT <= 0
	RETURNF _LIST
ENDIF
ARRAYSORT _LIST_ELEMENT, FORWARD, 0, _KEYCOUNT
_LIST '= ""
FOR _CNT,0,_KEYCOUNT
	_LIST += _LIST_ELEMENT:_CNT + ","
NEXT
RETURNF _LIST

;================================================
;@LIST_SORT_R (#FUNCTIONS) ;대상의 가변장 배열을 역순서（내림차순）로 소트 한 가변장 배열을 돌려준다.
;_LIST       대상의 가변장 배열（문자열）
;RETURNF     소트 된 가변장 배열（문자열）
;================================================
@LIST_SORT_R(_LIST)
#FUNCTIONS
#DIMS _LIST
#DIMS _FUNCNAME
#DIM _KEYCOUNT
#DIM _CNT
SPLIT _LIST, ",", _LIST_ELEMENT
IF RESULT > _LIST_MAX
	THROW _List.ERB:리스트의 요소수가 너무 많다→%_LIST%
ENDIF
_KEYCOUNT = RESULT-1 ;말미가, 이므로 SPLIT 한 말단은 빈 문자열이 된다
IF _KEYCOUNT <= 0
	RETURNF _LIST
ENDIF
ARRAYSORT _LIST_ELEMENT, BACK, 0, _KEYCOUNT
_LIST '= ""
FOR _CNT,0,_KEYCOUNT
	_LIST += _LIST_ELEMENT:_CNT + ","
NEXT
RETURNF _LIST

;================================================
;@LIST_FOREACH ;대상의 가변장 배열에 포함되는 요소 모두에 대해, 차례로 CALLFORM %_FUNCNAME%, _VALUE; 를 실행한다.
;_LIST  대상의 연상 배열（문자열）
;_FUNCNAME    실행하는 함수명(CALLFORM %_FUNCNAME%, _VALUE)
;RESULT       특별히 이루어
;================================================
@LIST_FOREACH(_LIST, _FUNCNAME)
#DIMS _LIST
#DIMS _FUNCNAME
#DIM _KEYCOUNT
#DIM _CNT
#DIMS _LIST_ELEMENT_P,_LIST_MAX ;ERH의 변수를 사용하면 FOREACH중에 다른 배열의 SORT라든지 할 수 없게 되므로. 재귀의 수요는 아마 없기에 DYNAMIC에는 하지 않는다

SPLIT _LIST, ",", _LIST_ELEMENT_P
IF RESULT > _LIST_MAX
	THROW _List.ERB:리스트의 요소수가 너무 많다→%_LIST%
ENDIF

_KEYCOUNT = RESULT-1 ;말미가, 이므로 SPLIT 한 말단은 빈 문자열이 된다
IF _KEYCOUNT <= 0
	RETURN
ENDIF
FOR _CNT,0,_KEYCOUNT
	CALLFORM %_FUNCNAME%, _LIST_ELEMENT_P:_CNT
NEXT
RETURN




